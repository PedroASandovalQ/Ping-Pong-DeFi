"use strict";
/**
 * @file Compound
 * @desc This file defines the constructor of the `Compound` class.
 * @hidden
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var ethers_1 = require("ethers");
var comet = require("./comet");
var comp = require("./comp");
var comptroller = require("./comptroller");
var cToken = require("./cToken");
var eth = require("./eth");
var gov = require("./gov");
var priceFeed = require("./priceFeed");
var util = require("./util");
var constants_1 = require("./constants");
// Turn off Ethers.js warnings
ethers_1.ethers.utils.Logger.setLogLevel(ethers_1.ethers.utils.Logger.levels.ERROR);
/**
 * Creates an instance of the Compound.js SDK.
 *
 * @param {Provider | string} [provider] Optional Ethereum network provider.
 *     Defaults to Ethers.js fallback mainnet provider.
 * @param {object} [options] Optional provider options.
 *
 * @example
 *
 * ```
 * var compound = new Compound(window.ethereum); // web browser
 *
 * var compound = new Compound('http://127.0.0.1:8545'); // HTTP provider
 *
 * var compound = new Compound(); // Uses Ethers.js fallback mainnet (for testing only)
 *
 * var compound = new Compound('goerli'); // Uses Ethers.js fallback (for testing only)
 *
 * // Init with private key (server side)
 * var compound = new Compound('https://mainnet.infura.io/v3/_your_project_id_', {
 *   privateKey: '0x_your_private_key_', // preferably with environment variable
 * });
 *
 * // Init with HD mnemonic (server side)
 * var compound = new Compound('mainnet' {
 *   mnemonic: 'clutch captain shoe...', // preferably with environment variable
 * });
 * ```
 *
 * Compound III (Comet) Object Initialization. This accepts the same parameters
 *     as the `Compound` constructor. An error will be thrown initially and
 *     whenever a method is called if the provider does not match the network of
 *     the specific Comet deployment. The SDK constants as well as a method in
 *     the Comet documentation note the Comet deployments that Compound.js
 *     supports.
 *
 * ```
 * var compound = new Compound(window.ethereum);
 * var comet = compound.comet.MAINNET_USDC(); // provider from `compound` will be used unless on is explicitly passed
 * ```
 *
 * @returns {object} Returns an instance of the Compound.js SDK.
 */
var Compound = function (provider, options) {
    if (provider === void 0) { provider = 'mainnet'; }
    if (options === void 0) { options = {}; }
    var originalProvider = provider;
    options.provider = provider || options.provider;
    provider = eth._createProvider(options);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    var instance = __assign(__assign(__assign(__assign(__assign({ _originalProvider: originalProvider, _provider: provider }, comptroller), cToken), gov), priceFeed), { claimComp: comp.claimComp, delegate: comp.delegate, delegateBySig: comp.delegateBySig, createDelegateSignature: comp.createDelegateSignature });
    // Instance needs to know which network the provider connects to, so it can
    //     use the correct contract addresses.
    instance._networkPromise = eth.getProviderNetwork(provider).then(function (_network) {
        delete instance._networkPromise;
        instance._network = _network;
    });
    instance.comet = {};
    var comets = comet.getSupportedDeployments();
    comets.forEach(function (_comet) {
        var cometReference = _comet.toUpperCase();
        instance.comet[cometReference] = function (_provider, _options) {
            if (_provider === void 0) { _provider = instance._provider; }
            if (_options === void 0) { _options = {}; }
            var _originalProvider = _provider;
            _options.provider = _provider || _options.provider;
            _provider = eth._createProvider(_options);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            var cometInstance = {
                _originalProvider: _originalProvider,
                _provider: _provider,
                _invalidProvider: false,
                _cometDeploymentName: _comet
            };
            Object.keys(comet).forEach(function (method) {
                cometInstance[method] = comet[method];
            });
            function disableCometConnection(error) {
                console.error(error);
                // All Comet methods will throw an error when called if this flag is set
                cometInstance._invalidProvider = error;
            }
            cometInstance._networkPromise = eth.getProviderNetwork(_provider).then(function (_network) {
                delete cometInstance._networkPromise;
                cometInstance._network = _network;
                // Throws an error if the Chain ID is not compatible
                util.getNetNameWithChainId(_network.id);
                if (constants_1.cometConstants.instanceNetworkMap[_comet] !== _network.name) {
                    disableCometConnection('Compound.js Comet constructor was passed a provider that is not compatible with the selected Comet instance.');
                }
            });
            return cometInstance;
        };
    });
    return instance;
};
Compound.eth = eth;
Compound.util = util;
Compound._ethers = ethers_1.ethers;
Compound.decimals = constants_1.decimals;
Compound.comp = {
    getCompAccrued: comp.getCompAccrued,
    getCompBalance: comp.getCompBalance
};
Compound.comet = {
    getSupportedDeployments: comet.getSupportedDeployments,
    getSupportedCollaterals: comet.getSupportedCollaterals,
    getBaseAssetName: comet.getBaseAssetName
};
Object.assign(Compound, constants_1.constants);
module.exports = Compound;
//# sourceMappingURL=index.js.map